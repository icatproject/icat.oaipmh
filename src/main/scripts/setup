#!/usr/bin/env python3
from setup_utils import *
import os

# icat.oaipmh

def undeploy():
    app = actions.getAppName("icat.oaipmh")
    if app: actions.undeploy(app)

actions, arg, props = getActions("setup.properties", [])

prop_name = "run.properties"
prop_list = ["icat.url", "icat.auth", "repositoryName", "adminEmails", "requestUrl", "maxResults", "icatDateTimeFormat", "icatDateTimeZone", "metadataPrefixes", "data.configurations"]

properties = getProperties(prop_name, prop_list)

if arg in ["CONFIGURE", "INSTALL"]:
    actions.configure(prop_name, prop_list)
    actions.checkNoErrors()

if arg == "INSTALL":

    metadataPrefixes = properties["metadataPrefixes"].split()
    dataConfigurations = properties["data.configurations"].split()
    try:
        sets = properties["sets"].split()
    except KeyError:
        sets = []

    try:
        val = int(properties["maxResults"])
        if val < 1:
            abort("The value for 'maxResults' is less than 1 in run.properties")
    except ValueError:
        abort("The value for 'maxResults' is no integer in run.properties")

    if "oai_dc" not in metadataPrefixes:
        abort("Support for the metadataPrefix 'oai_dc' is missing in run.properties")

    for v in dataConfigurations:
        if "," in v:
            abort("The value '" + v + "' in data.configurations list must not contain a comma in run.properties")
        if "data." + v + ".mainObject" not in properties:
            abort("data.configurations include '" + v + "' but 'data." + v + ".mainObject' is not defined in run.properties")
        if "data." + v + ".metadataPrefixes" not in properties:
            abort("data.configurations include '" + v + "' but 'data." + v + ".metadataPrefixes' is not defined in run.properties")

        dataConfigurationMetadataPrefixes = properties["data." + v + ".metadataPrefixes"].split()
        if "oai_dc" not in dataConfigurationMetadataPrefixes:
            abort("Support for 'oai_dc' is missing under 'data." + v + ".metadataPrefixes' in run.properties")
        for w in dataConfigurationMetadataPrefixes:
            if w not in metadataPrefixes:
                abort("data." + v + ".metadataPrefixes include '" + w + "' but this metadataPrefix is not defined in run.properties")

    for v in metadataPrefixes:
        if v + ".xslt" not in properties:
            abort("metadataPrefixes include '" + v + "' but '" + v + ".xslt' is not defined in run.properties")
        if v + ".namespace" not in properties:
            abort("metadataPrefixes include '" + v + "' but '" + v + ".namespace' is not defined in run.properties")
        if v + ".schema" not in properties:
            abort("metadataPrefixes include '" + v + "' but '" + v + ".schema' is not defined in run.properties")
        if "responseDebug" not in properties or properties["responseDebug"] != "true":
            if not os.path.exists(properties[v + ".xslt"]):
                abort("The file '" + properties[v + ".xslt"] + "' as listed in run.properties for '" + v + ".xslt' does not exist on your system")

    for v in sets:
        if "," in v:
            abort("The value '" + v + "' in sets list must not contain a comma in run.properties")
        if "sets." + v + ".name" not in properties:
            abort("sets include '" + v + "' but 'sets." + v + ".name' is not defined in run.properties")
        if "sets." + v + ".configurations" not in properties:
            abort("sets include '" + v + "' but 'sets." + v + ".configurations' is not defined in run.properties")

        setDataConfigurations = properties["sets." + v + ".configurations"].split()
        for w in setDataConfigurations:
            if w not in dataConfigurations:
                abort("sets." + v + ".configurations include '" + w + "' but this data configuration is not defined in run.properties")

    try:
        undeploy()
        ovfiles = [[prop_name, "WEB-INF/classes"]]
        if os.path.exists("logback.xml"): ovfiles.append(["logback.xml", "WEB-INF/classes"])
        actions.deploy(deploymentorder=80, files=ovfiles)
    except Exception as e:
        abort(str(e))

if arg == "UNINSTALL":
    try:
        undeploy()
    except Exception as e:
        abort(str(e))
